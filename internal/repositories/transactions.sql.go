// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package repositories

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO kp_transactions (
    transaction_id,
    customer_id,
    customer_limit_id,
    contract_number,
    otr_amount,
    admin_fee,
    installment_amount,
    interest_amount,
    asset_name
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTransactionParams struct {
	TransactionID     string `db:"transaction_id" json:"transaction_id"`
	CustomerID        string `db:"customer_id" json:"customer_id"`
	CustomerLimitID   string `db:"customer_limit_id" json:"customer_limit_id"`
	ContractNumber    string `db:"contract_number" json:"contract_number"`
	OtrAmount         string `db:"otr_amount" json:"otr_amount"`
	AdminFee          string `db:"admin_fee" json:"admin_fee"`
	InstallmentAmount string `db:"installment_amount" json:"installment_amount"`
	InterestAmount    string `db:"interest_amount" json:"interest_amount"`
	AssetName         string `db:"asset_name" json:"asset_name"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.exec(ctx, q.createTransactionStmt, createTransaction,
		arg.TransactionID,
		arg.CustomerID,
		arg.CustomerLimitID,
		arg.ContractNumber,
		arg.OtrAmount,
		arg.AdminFee,
		arg.InstallmentAmount,
		arg.InterestAmount,
		arg.AssetName,
	)
	return err
}

const getCustomerTransactionByLimitIdAndCustomerId = `-- name: GetCustomerTransactionByLimitIdAndCustomerId :many
SELECT a.transaction_id, a.customer_id, a.customer_limit_id, a.contract_number, a.otr_amount, a.admin_fee, 
a.installment_amount, a.interest_amount, a.asset_name
FROM kp_transactions a
WHERE a.created_at >= DATE_FORMAT(NOW(), '%Y-%m-01')
   AND a.created_at < DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 MONTH), '%Y-%m-01')
`

type GetCustomerTransactionByLimitIdAndCustomerIdRow struct {
	TransactionID     string `db:"transaction_id" json:"transaction_id"`
	CustomerID        string `db:"customer_id" json:"customer_id"`
	CustomerLimitID   string `db:"customer_limit_id" json:"customer_limit_id"`
	ContractNumber    string `db:"contract_number" json:"contract_number"`
	OtrAmount         string `db:"otr_amount" json:"otr_amount"`
	AdminFee          string `db:"admin_fee" json:"admin_fee"`
	InstallmentAmount string `db:"installment_amount" json:"installment_amount"`
	InterestAmount    string `db:"interest_amount" json:"interest_amount"`
	AssetName         string `db:"asset_name" json:"asset_name"`
}

func (q *Queries) GetCustomerTransactionByLimitIdAndCustomerId(ctx context.Context) ([]GetCustomerTransactionByLimitIdAndCustomerIdRow, error) {
	rows, err := q.query(ctx, q.getCustomerTransactionByLimitIdAndCustomerIdStmt, getCustomerTransactionByLimitIdAndCustomerId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomerTransactionByLimitIdAndCustomerIdRow
	for rows.Next() {
		var i GetCustomerTransactionByLimitIdAndCustomerIdRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.CustomerID,
			&i.CustomerLimitID,
			&i.ContractNumber,
			&i.OtrAmount,
			&i.AdminFee,
			&i.InstallmentAmount,
			&i.InterestAmount,
			&i.AssetName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerTransactionOtr = `-- name: GetCustomerTransactionOtr :one
SELECT COALESCE(SUM(a.otr_amount),0) as history_transaction_limit
FROM kp_transactions a
JOIN kp_customers_limits b ON a.customer_id = b.customer_id
WHERE a.customer_id = ? AND a.customer_limit_id = ?
`

type GetCustomerTransactionOtrParams struct {
	CustomerID      string `db:"customer_id" json:"customer_id"`
	CustomerLimitID string `db:"customer_limit_id" json:"customer_limit_id"`
}

func (q *Queries) GetCustomerTransactionOtr(ctx context.Context, arg GetCustomerTransactionOtrParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getCustomerTransactionOtrStmt, getCustomerTransactionOtr, arg.CustomerID, arg.CustomerLimitID)
	var history_transaction_limit interface{}
	err := row.Scan(&history_transaction_limit)
	return history_transaction_limit, err
}
