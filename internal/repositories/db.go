// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repositories

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCustomersStmt, err = db.PrepareContext(ctx, createCustomers); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomers: %w", err)
	}
	if q.createCustomersLimitsStmt, err = db.PrepareContext(ctx, createCustomersLimits); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomersLimits: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getCustomerLimitByIdStmt, err = db.PrepareContext(ctx, getCustomerLimitById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerLimitById: %w", err)
	}
	if q.getCustomerTransactionByLimitIdAndCustomerIdStmt, err = db.PrepareContext(ctx, getCustomerTransactionByLimitIdAndCustomerId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerTransactionByLimitIdAndCustomerId: %w", err)
	}
	if q.getCustomerTransactionOtrStmt, err = db.PrepareContext(ctx, getCustomerTransactionOtr); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerTransactionOtr: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCustomersStmt != nil {
		if cerr := q.createCustomersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomersStmt: %w", cerr)
		}
	}
	if q.createCustomersLimitsStmt != nil {
		if cerr := q.createCustomersLimitsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomersLimitsStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getCustomerLimitByIdStmt != nil {
		if cerr := q.getCustomerLimitByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerLimitByIdStmt: %w", cerr)
		}
	}
	if q.getCustomerTransactionByLimitIdAndCustomerIdStmt != nil {
		if cerr := q.getCustomerTransactionByLimitIdAndCustomerIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerTransactionByLimitIdAndCustomerIdStmt: %w", cerr)
		}
	}
	if q.getCustomerTransactionOtrStmt != nil {
		if cerr := q.getCustomerTransactionOtrStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerTransactionOtrStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                               DBTX
	tx                                               *sql.Tx
	createCustomersStmt                              *sql.Stmt
	createCustomersLimitsStmt                        *sql.Stmt
	createTransactionStmt                            *sql.Stmt
	createUserStmt                                   *sql.Stmt
	getCustomerLimitByIdStmt                         *sql.Stmt
	getCustomerTransactionByLimitIdAndCustomerIdStmt *sql.Stmt
	getCustomerTransactionOtrStmt                    *sql.Stmt
	getUserByEmailStmt                               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createCustomersStmt:       q.createCustomersStmt,
		createCustomersLimitsStmt: q.createCustomersLimitsStmt,
		createTransactionStmt:     q.createTransactionStmt,
		createUserStmt:            q.createUserStmt,
		getCustomerLimitByIdStmt:  q.getCustomerLimitByIdStmt,
		getCustomerTransactionByLimitIdAndCustomerIdStmt: q.getCustomerTransactionByLimitIdAndCustomerIdStmt,
		getCustomerTransactionOtrStmt:                    q.getCustomerTransactionOtrStmt,
		getUserByEmailStmt:                               q.getUserByEmailStmt,
	}
}
