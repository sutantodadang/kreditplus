// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repositories

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO kp_users (
  user_id, email, password
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	UserID   string `db:"user_id" json:"user_id"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser, arg.UserID, arg.Email, arg.Password)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, password FROM kp_users WHERE email = ?
`

type GetUserByEmailRow struct {
	UserID   string `db:"user_id" json:"user_id"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.UserID, &i.Email, &i.Password)
	return i, err
}
