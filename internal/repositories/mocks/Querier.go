// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	repositories "kreditplus/internal/repositories"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	DBTX
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateCustomers provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateCustomers(ctx context.Context, arg repositories.CreateCustomersParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateCustomersParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomers'
type Querier_CreateCustomers_Call struct {
	*mock.Call
}

// CreateCustomers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repositories.CreateCustomersParams
func (_e *Querier_Expecter) CreateCustomers(ctx interface{}, arg interface{}) *Querier_CreateCustomers_Call {
	return &Querier_CreateCustomers_Call{Call: _e.mock.On("CreateCustomers", ctx, arg)}
}

func (_c *Querier_CreateCustomers_Call) Run(run func(ctx context.Context, arg repositories.CreateCustomersParams)) *Querier_CreateCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateCustomersParams))
	})
	return _c
}

func (_c *Querier_CreateCustomers_Call) Return(_a0 error) *Querier_CreateCustomers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateCustomers_Call) RunAndReturn(run func(context.Context, repositories.CreateCustomersParams) error) *Querier_CreateCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomersLimits provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateCustomersLimits(ctx context.Context, arg []repositories.CreateCustomersLimitsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomersLimits")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repositories.CreateCustomersLimitsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repositories.CreateCustomersLimitsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repositories.CreateCustomersLimitsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateCustomersLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomersLimits'
type Querier_CreateCustomersLimits_Call struct {
	*mock.Call
}

// CreateCustomersLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []repositories.CreateCustomersLimitsParams
func (_e *Querier_Expecter) CreateCustomersLimits(ctx interface{}, arg interface{}) *Querier_CreateCustomersLimits_Call {
	return &Querier_CreateCustomersLimits_Call{Call: _e.mock.On("CreateCustomersLimits", ctx, arg)}
}

func (_c *Querier_CreateCustomersLimits_Call) Run(run func(ctx context.Context, arg []repositories.CreateCustomersLimitsParams)) *Querier_CreateCustomersLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]repositories.CreateCustomersLimitsParams))
	})
	return _c
}

func (_c *Querier_CreateCustomersLimits_Call) Return(_a0 int64, _a1 error) *Querier_CreateCustomersLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateCustomersLimits_Call) RunAndReturn(run func(context.Context, []repositories.CreateCustomersLimitsParams) (int64, error)) *Querier_CreateCustomersLimits_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateTransaction(ctx context.Context, arg repositories.CreateTransactionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateTransactionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Querier_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repositories.CreateTransactionParams
func (_e *Querier_Expecter) CreateTransaction(ctx interface{}, arg interface{}) *Querier_CreateTransaction_Call {
	return &Querier_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, arg)}
}

func (_c *Querier_CreateTransaction_Call) Run(run func(ctx context.Context, arg repositories.CreateTransactionParams)) *Querier_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateTransactionParams))
	})
	return _c
}

func (_c *Querier_CreateTransaction_Call) Return(_a0 error) *Querier_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateTransaction_Call) RunAndReturn(run func(context.Context, repositories.CreateTransactionParams) error) *Querier_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg repositories.CreateUserParams) (sql.Result, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateUserParams) (sql.Result, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateUserParams) sql.Result); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Querier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repositories.CreateUserParams
func (_e *Querier_Expecter) CreateUser(ctx interface{}, arg interface{}) *Querier_CreateUser_Call {
	return &Querier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Querier_CreateUser_Call) Run(run func(ctx context.Context, arg repositories.CreateUserParams)) *Querier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateUserParams))
	})
	return _c
}

func (_c *Querier_CreateUser_Call) Return(_a0 sql.Result, _a1 error) *Querier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateUser_Call) RunAndReturn(run func(context.Context, repositories.CreateUserParams) (sql.Result, error)) *Querier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerLimitById provides a mock function with given fields: ctx, customerID
func (_m *Querier) GetCustomerLimitById(ctx context.Context, customerID string) ([]repositories.GetCustomerLimitByIdRow, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerLimitById")
	}

	var r0 []repositories.GetCustomerLimitByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]repositories.GetCustomerLimitByIdRow, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []repositories.GetCustomerLimitByIdRow); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.GetCustomerLimitByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCustomerLimitById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerLimitById'
type Querier_GetCustomerLimitById_Call struct {
	*mock.Call
}

// GetCustomerLimitById is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
func (_e *Querier_Expecter) GetCustomerLimitById(ctx interface{}, customerID interface{}) *Querier_GetCustomerLimitById_Call {
	return &Querier_GetCustomerLimitById_Call{Call: _e.mock.On("GetCustomerLimitById", ctx, customerID)}
}

func (_c *Querier_GetCustomerLimitById_Call) Run(run func(ctx context.Context, customerID string)) *Querier_GetCustomerLimitById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetCustomerLimitById_Call) Return(_a0 []repositories.GetCustomerLimitByIdRow, _a1 error) *Querier_GetCustomerLimitById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCustomerLimitById_Call) RunAndReturn(run func(context.Context, string) ([]repositories.GetCustomerLimitByIdRow, error)) *Querier_GetCustomerLimitById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerTransactionByLimitIdAndCustomerId provides a mock function with given fields: ctx
func (_m *Querier) GetCustomerTransactionByLimitIdAndCustomerId(ctx context.Context) ([]repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerTransactionByLimitIdAndCustomerId")
	}

	var r0 []repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerTransactionByLimitIdAndCustomerId'
type Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call struct {
	*mock.Call
}

// GetCustomerTransactionByLimitIdAndCustomerId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetCustomerTransactionByLimitIdAndCustomerId(ctx interface{}) *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call {
	return &Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call{Call: _e.mock.On("GetCustomerTransactionByLimitIdAndCustomerId", ctx)}
}

func (_c *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call) Run(run func(ctx context.Context)) *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call) Return(_a0 []repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow, _a1 error) *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call) RunAndReturn(run func(context.Context) ([]repositories.GetCustomerTransactionByLimitIdAndCustomerIdRow, error)) *Querier_GetCustomerTransactionByLimitIdAndCustomerId_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerTransactionOtr provides a mock function with given fields: ctx, arg
func (_m *Querier) GetCustomerTransactionOtr(ctx context.Context, arg repositories.GetCustomerTransactionOtrParams) (interface{}, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerTransactionOtr")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetCustomerTransactionOtrParams) (interface{}, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetCustomerTransactionOtrParams) interface{}); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetCustomerTransactionOtrParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCustomerTransactionOtr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerTransactionOtr'
type Querier_GetCustomerTransactionOtr_Call struct {
	*mock.Call
}

// GetCustomerTransactionOtr is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repositories.GetCustomerTransactionOtrParams
func (_e *Querier_Expecter) GetCustomerTransactionOtr(ctx interface{}, arg interface{}) *Querier_GetCustomerTransactionOtr_Call {
	return &Querier_GetCustomerTransactionOtr_Call{Call: _e.mock.On("GetCustomerTransactionOtr", ctx, arg)}
}

func (_c *Querier_GetCustomerTransactionOtr_Call) Run(run func(ctx context.Context, arg repositories.GetCustomerTransactionOtrParams)) *Querier_GetCustomerTransactionOtr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetCustomerTransactionOtrParams))
	})
	return _c
}

func (_c *Querier_GetCustomerTransactionOtr_Call) Return(_a0 interface{}, _a1 error) *Querier_GetCustomerTransactionOtr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCustomerTransactionOtr_Call) RunAndReturn(run func(context.Context, repositories.GetCustomerTransactionOtrParams) (interface{}, error)) *Querier_GetCustomerTransactionOtr_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Querier) GetUserByEmail(ctx context.Context, email string) (repositories.GetUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 repositories.GetUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.GetUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.GetUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repositories.GetUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type Querier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Querier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *Querier_GetUserByEmail_Call {
	return &Querier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *Querier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Querier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetUserByEmail_Call) Return(_a0 repositories.GetUserByEmailRow, _a1 error) *Querier_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (repositories.GetUserByEmailRow, error)) *Querier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
